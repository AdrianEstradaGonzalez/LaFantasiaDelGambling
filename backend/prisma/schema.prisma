generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String              @id @default(cuid())
  email       String              @unique
  password    String
  name        String?
  isAdmin     Boolean             @default(false)
  leaguesLed  League[]            @relation("LeagueLeader")
  memberships LeagueMember[]
  resetCodes  PasswordResetCode[]
  squads      Squad[]

  @@map("user")
}

model PasswordResetCode {
  id        String   @id @default(cuid())
  userId    String?
  email     String
  codeHash  String
  expiresAt DateTime
  verified  Boolean  @default(false)
  used      Boolean  @default(false)
  attempts  Int      @default(0)
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email, expiresAt, used])
}

model League {
  id         String         @id @default(cuid())
  name       String         @unique
  leaderId   String
  createdAt  DateTime       @default(now())
  code       String         @unique
  leader     User           @relation("LeagueLeader", fields: [leaderId], references: [id], onDelete: Cascade)
  members    LeagueMember[]
  squads     Squad[]
  bet_option bet_option[]
}

model LeagueMember {
  leagueId      String
  userId        String
  points        Int      @default(0)
  joinedAt      DateTime @default(now())
  budget        Int      @default(500)
  initialBudget Int      @default(500)
  bettingBudget Int      @default(250)
  league        League   @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bets          Bet[]

  @@id([leagueId, userId])
  @@index([userId])
}

model Squad {
  id        String        @id @default(cuid())
  userId    String
  leagueId  String
  name      String        @default("Mi Plantilla")
  formation String
  isActive  Boolean       @default(true)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  league    League        @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  players   SquadPlayer[]

  @@unique([userId, leagueId])
  @@index([userId, leagueId])
}

model SquadPlayer {
  id         String   @id @default(cuid())
  squadId    String
  playerId   Int
  playerName String
  position   String
  role       String
  createdAt  DateTime @default(now())
  pricePaid  Int      @default(1)
  isCaptain  Boolean  @default(false)
  squad      Squad    @relation(fields: [squadId], references: [id], onDelete: Cascade)

  @@unique([squadId, position])
  @@index([squadId])
}

model Player {
  id          Int      @id
  name        String
  position    String
  teamId      Int
  teamName    String
  teamCrest   String?
  nationality String?
  shirtNumber Int?
  photo       String?
  price       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([teamId])
  @@index([position])
  @@index([price])
  @@map("player")
}

model Bet {
  id           String       @id @default(cuid())
  leagueId     String
  userId       String
  jornada      Int
  matchId      Int
  betType      String
  betLabel     String
  odd          Float
  amount       Int
  potentialWin Int
  status       String       @default("pending")
  createdAt    DateTime     @default(now())
  leagueMember LeagueMember @relation(fields: [leagueId, userId], references: [leagueId, userId], onDelete: Cascade)

  @@index([leagueId, userId])
  @@index([jornada])
  @@index([status])
  @@map("bet")
}

model bet_option {
  id        String   @id
  leagueId  String
  jornada   Int
  matchId   Int
  homeTeam  String
  awayTeam  String
  betType   String
  betLabel  String
  odd       Float
  createdAt DateTime @default(now())
  League    League   @relation(fields: [leagueId], references: [id], onDelete: Cascade)

  @@index([leagueId, jornada])
  @@index([matchId])
}
