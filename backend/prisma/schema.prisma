generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String              @id @default(cuid())
  email       String              @unique
  password    String
  name        String?
  isAdmin     Boolean             @default(false)
  leaguesLed  League[]            @relation("LeagueLeader")
  memberships LeagueMember[]
  resetCodes  PasswordResetCode[]
  squads      Squad[]

  @@map("user")
}

model PasswordResetCode {
  id        String   @id @default(cuid())
  userId    String?
  email     String
  codeHash  String
  expiresAt DateTime
  verified  Boolean  @default(false)
  used      Boolean  @default(false)
  attempts  Int      @default(0)
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email, expiresAt, used])
}

model League {
  id             String         @id @default(cuid())
  name           String         @unique
  leaderId       String
  createdAt      DateTime       @default(now())
  code           String         @unique
  currentJornada Int            @default(1)
  jornadaStatus  String         @default("open") // "open" o "closed"
  leader         User           @relation("LeagueLeader", fields: [leaderId], references: [id], onDelete: Cascade)
  members        LeagueMember[]
  squads         Squad[]
  bet_option     bet_option[]
}

model LeagueMember {
  leagueId      String
  userId        String
  points        Int      @default(0)
  joinedAt      DateTime @default(now())
  budget        Int      @default(500)
  initialBudget Int      @default(500)
  bettingBudget Int      @default(250)
  league        League   @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bets          Bet[]

  @@id([leagueId, userId])
  @@index([userId])
}

model Squad {
  id        String        @id @default(cuid())
  userId    String
  leagueId  String
  name      String        @default("Mi Plantilla")
  formation String
  isActive  Boolean       @default(true)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  league    League        @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  players   SquadPlayer[]

  @@unique([userId, leagueId])
  @@index([userId, leagueId])
}

model SquadPlayer {
  id         String   @id @default(cuid())
  squadId    String
  playerId   Int
  playerName String
  position   String
  role       String
  createdAt  DateTime @default(now())
  pricePaid  Int      @default(1)
  isCaptain  Boolean  @default(false)
  squad      Squad    @relation(fields: [squadId], references: [id], onDelete: Cascade)

  @@unique([squadId, position])
  @@index([squadId])
}

model Player {
  id                  Int                   @id
  name                String
  position            String
  teamId              Int
  teamName            String
  teamCrest           String?
  nationality         String?
  shirtNumber         Int?
  photo               String?
  price               Int
  // Puntos calculados de la última jornada (cache)
  lastJornadaPoints   Int                   @default(0)
  // Jornada a la que pertenecen esos puntos
  lastJornadaNumber   Int                   @default(0)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  PlayerJornadaPoints PlayerJornadaPoints[]
  stats               PlayerStats[]

  @@index([teamId])
  @@index([position])
  @@index([price])
  @@map("player")
}

model PlayerStats {
  id        String   @id @default(cuid())
  playerId  Int
  jornada   Int
  season    Int      @default(2025)
  
  // Información del partido
  fixtureId Int
  teamId    Int
  
  // Puntos calculados según DreamLeague
  totalPoints     Int    @default(0)
  pointsBreakdown Json?  // Desglose detallado de puntos por estadística
  
  // Games
  minutes     Int?
  position    String?
  rating      String?
  captain     Boolean  @default(false)
  substitute  Boolean  @default(false)
  
  // Goals
  goals       Int?
  assists     Int?
  conceded    Int?
  saves       Int?
  
  // Shots
  shotsTotal  Int?
  shotsOn     Int?
  
  // Passes
  passesTotal Int?
  passesKey   Int?
  passesAccuracy Int?
  
  // Tackles
  tacklesTotal         Int?
  tacklesBlocks        Int?
  tacklesInterceptions Int?
  
  // Duels
  duelsTotal Int?
  duelsWon   Int?
  
  // Dribbles
  dribblesAttempts Int?
  dribblesSuccess  Int?
  dribblesPast     Int?
  
  // Fouls
  foulsDrawn     Int?
  foulsCommitted Int?
  
  // Cards
  yellowCards Int?
  redCards    Int?
  
  // Penalty
  penaltyWon       Int?
  penaltyCommitted Int?
  penaltyScored    Int?
  penaltyMissed    Int?
  penaltySaved     Int?
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([playerId, jornada, season])
  @@index([playerId, jornada])
  @@index([jornada, season])
  @@map("player_stats")
}

model PlayerJornadaPoints {
  playerId Int
  season   Int @default(2025)

  pointsJ1  Int?
  pointsJ2  Int?
  pointsJ3  Int?
  pointsJ4  Int?
  pointsJ5  Int?
  pointsJ6  Int?
  pointsJ7  Int?
  pointsJ8  Int?
  pointsJ9  Int?
  pointsJ10 Int?
  pointsJ11 Int?
  pointsJ12 Int?
  pointsJ13 Int?
  pointsJ14 Int?
  pointsJ15 Int?
  pointsJ16 Int?
  pointsJ17 Int?
  pointsJ18 Int?
  pointsJ19 Int?
  pointsJ20 Int?
  pointsJ21 Int?
  pointsJ22 Int?
  pointsJ23 Int?
  pointsJ24 Int?
  pointsJ25 Int?
  pointsJ26 Int?
  pointsJ27 Int?
  pointsJ28 Int?
  pointsJ29 Int?
  pointsJ30 Int?
  pointsJ31 Int?
  pointsJ32 Int?
  pointsJ33 Int?
  pointsJ34 Int?
  pointsJ35 Int?
  pointsJ36 Int?
  pointsJ37 Int?
  pointsJ38 Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@id([playerId, season])
  @@map("player_jornada_points")
}

model Bet {
  id           String       @id @default(cuid())
  leagueId     String
  userId       String
  jornada      Int
  matchId      Int          // Fixture ID de la API
  homeTeam     String       // Equipo local
  awayTeam     String       // Equipo visitante
  betType      String       // Tipo de apuesta (ej: "Goles totales", "Resultado")
  betLabel     String       // Etiqueta de la opción (ej: "Más de 2.5 goles")
  
  // Campos para evaluación posterior consultando API-Football
  apiBetId     Int?         // ID del tipo de apuesta en API-Football (ej: 5 para Goals O/U)
  apiEndpoint  String?      // Endpoint a consultar: "odds", "statistics", "fixtures"
  apiStatKey   String?      // Clave de estadística (ej: "goals.total", "corner_kicks", "yellow_cards")
  apiOperator  String?      // Operador: "greater_than", "less_than", "equals", "odd", "even"
  apiValue     String?      // Valor a comparar (ej: "2.5", "10", "Home", "Yes")
  
  odd          Float
  amount       Int
  potentialWin Int
  status       String       @default("pending") // pending, won, lost
  evaluatedAt  DateTime?    // Cuándo se evaluó la apuesta
  createdAt    DateTime     @default(now())
  leagueMember LeagueMember @relation(fields: [leagueId, userId], references: [leagueId, userId], onDelete: Cascade)

  @@index([leagueId, userId])
  @@index([jornada])
  @@index([status])
  @@index([matchId])
  @@map("bet")
}

model bet_option {
  id        String   @id
  leagueId  String
  jornada   Int
  matchId   Int
  homeTeam  String
  awayTeam  String
  betType   String
  betLabel  String
  odd       Float
  createdAt DateTime @default(now())
  League    League   @relation(fields: [leagueId], references: [id], onDelete: Cascade)

  @@index([leagueId, jornada])
  @@index([matchId])
}
